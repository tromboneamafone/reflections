What happens when you initalize a repository? Why do you need to do it?

Initializing a repository sets-up all the git overhead needed to properly version control the contents of the directory. To use any version control features, commiting, branching, you need to init first.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is a subset of the working directory. The working directory contains all files in the directory, and the staging area contains files that are going to be added to the repository. The staging area will be nice to distinguish between important files needed for the repository, versus unimportant files to be left out.

How can you use the staging area to make sure you have one commit per logical change?

you will only need to run 'git add' on the files that pertain to the one 'logical change.'

What are some situations when branches would be helpfull in keeping your history organized? How would branches help?

whenever a change bigger than '1 logical change' is needed, perhaps a new functonality or test feature.

How do the diagrams help you visualize the branch structure?

They barely do! a branch is visualized with a seperation of '*' with a '|/' to symbolize the branch and directly shows which commits belong to the branch and which commits are still a part of master

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches combines the temporary-working-on-a-feature-branch with the master branch to keep development moving forward. the merge is diagramed as a '|\'

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

automatic merging is nice when the changes are in different areas, manual merges are needed whenever changes are in teh same area and need to logically be sorted out before a merge.
